package com.mycompany.sortingalgorithms;

import com.formdev.flatlaf.FlatLightLaf;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Yusuf Ihsan Simsek
 */
public class SortingAlgorithms extends javax.swing.JFrame {

    DefaultListModel unsortedList;
    DefaultListModel sortedList;

    int unsortedArray[];
    int arrayLength;
    int lengthGap;
    int amount;

    public static double delta;

    ImageIcon iconCross;
    ImageIcon iconTick;

    ArrayList<int[]> sortedArrays;
    ArrayList<ArrayList<double[]>> allDatas;

    ArrayList<double[]> heapData;
    ArrayList<double[]> bubbleData;
    ArrayList<double[]> insertionData;
    ArrayList<double[]> selectionData;
    ArrayList<double[]> quickData;
    ArrayList<double[]> mergeData;

    GraphPanel heapGraph;
    GraphPanel bubbleGraph;
    GraphPanel insertionGraph;
    GraphPanel selectionGraph;
    GraphPanel quickGraph;
    GraphPanel mergeGraph;

    /**
     * Creates new form SortingAlgorithms
     */
    public SortingAlgorithms() {
        initComponents();

        try {
            UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(SortingAlgorithms.class.getName()).log(Level.SEVERE, null, ex);
        }

        SwingUtilities.updateComponentTreeUI(this);
        this.setLocationRelativeTo(null);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);

        unsortedList = new DefaultListModel();
        sortedList = new DefaultListModel();

        sortedArrays = new ArrayList<>();

        BufferedImage cross = null;
        BufferedImage tick = null;
        try {
            cross = ImageIO.read(this.getClass().getClassLoader().getResource("cross.png"));
            tick = ImageIO.read(this.getClass().getClassLoader().getResource("tick.png"));
        } catch (IOException ex) {
            Logger.getLogger(SortingAlgorithms.class.getName()).log(Level.SEVERE, null, ex);
        }
        iconCross = new ImageIcon(cross);
        iconTick = new ImageIcon(tick);

        jlbl_heapSort.setIcon(iconCross);
        jlbl_bubbleSort.setIcon(iconCross);
        jlbl_insertionSort.setIcon(iconCross);
        jlbl_mergeSort.setIcon(iconCross);
        jlbl_quickSort.setIcon(iconCross);
        jlbl_selectionSort.setIcon(iconCross);

        heapData = new ArrayList<>();
        bubbleData = new ArrayList<>();
        insertionData = new ArrayList<>();
        selectionData = new ArrayList<>();
        quickData = new ArrayList<>();
        mergeData = new ArrayList<>();

        allDatas = new ArrayList<>();
        allDatas.add(heapData);
        allDatas.add(bubbleData);
        allDatas.add(insertionData);
        allDatas.add(selectionData);
        allDatas.add(quickData);
        allDatas.add(mergeData);

        heapGraph = new GraphPanel();
        bubbleGraph = new GraphPanel();
        insertionGraph = new GraphPanel();
        selectionGraph = new GraphPanel();
        quickGraph = new GraphPanel();
        mergeGraph = new GraphPanel();

        heapGraph.setLineColor(new Color(145, 236, 218));
        bubbleGraph.setLineColor(new Color(237, 61, 166));
        insertionGraph.setLineColor(new Color(233, 195, 45));
        selectionGraph.setLineColor(new Color(47, 213, 120));
        quickGraph.setLineColor(new Color(226, 51, 17));
        mergeGraph.setLineColor(new Color(65, 77, 247));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrp_graphStyle = new javax.swing.ButtonGroup();
        jpnl_background = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtxtfld_arrayLength = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jbtn_createRandArr = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jlst_unsortedList = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        jlst_sortedList = new javax.swing.JList<>();
        jtbdpn_sortingGraphics = new javax.swing.JTabbedPane();
        jpnl_heapPane = new javax.swing.JPanel();
        jpnl_bubblePane = new javax.swing.JPanel();
        jpnl_insertionPane = new javax.swing.JPanel();
        jpnl_selectionPane = new javax.swing.JPanel();
        jpnl_quickPane = new javax.swing.JPanel();
        jpnl_mergePane = new javax.swing.JPanel();
        jSeparator3 = new javax.swing.JSeparator();
        jlbl_heapSort = new javax.swing.JLabel();
        jlbl_bubbleSort = new javax.swing.JLabel();
        jlbl_insertionSort = new javax.swing.JLabel();
        jlbl_selectionSort = new javax.swing.JLabel();
        jlbl_quickSort = new javax.swing.JLabel();
        jlbl_mergeSort = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtxtfld_lengthGap = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtxtfld_amount = new javax.swing.JTextField();
        jlbl_arrayInformation = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jbtn_resetGraph = new javax.swing.JButton();
        jrdbtn_basic = new javax.swing.JRadioButton();
        jrdbtn_advanced = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sorting Algorithms");
        setMinimumSize(new java.awt.Dimension(891, 731));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jpnl_background.setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("Array Length:");

        jtxtfld_arrayLength.setBackground(new java.awt.Color(51, 51, 51));
        jtxtfld_arrayLength.setForeground(new java.awt.Color(153, 153, 153));
        jtxtfld_arrayLength.setText("50");
        jtxtfld_arrayLength.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jtxtfld_caretUpdate(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jbtn_createRandArr.setText("Create Random Array");
        jbtn_createRandArr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_createRandArrActionPerformed(evt);
            }
        });

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Unsorted Array", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 11), new java.awt.Color(204, 204, 204))); // NOI18N

        jlst_unsortedList.setBackground(new java.awt.Color(51, 51, 51));
        jlst_unsortedList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        jlst_unsortedList.setForeground(new java.awt.Color(204, 204, 204));
        jlst_unsortedList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jlst_unsortedList.setEnabled(false);
        jScrollPane3.setViewportView(jlst_unsortedList);

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sorted Array", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 11), new java.awt.Color(204, 204, 204))); // NOI18N

        jlst_sortedList.setBackground(new java.awt.Color(51, 51, 51));
        jlst_sortedList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        jlst_sortedList.setForeground(new java.awt.Color(204, 204, 204));
        jlst_sortedList.setEnabled(false);
        jScrollPane4.setViewportView(jlst_sortedList);

        jtbdpn_sortingGraphics.setBackground(new java.awt.Color(51, 51, 51));
        jtbdpn_sortingGraphics.setForeground(new java.awt.Color(204, 204, 204));
        jtbdpn_sortingGraphics.setToolTipText("");

        jpnl_heapPane.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jpnl_heapPaneLayout = new javax.swing.GroupLayout(jpnl_heapPane);
        jpnl_heapPane.setLayout(jpnl_heapPaneLayout);
        jpnl_heapPaneLayout.setHorizontalGroup(
            jpnl_heapPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 672, Short.MAX_VALUE)
        );
        jpnl_heapPaneLayout.setVerticalGroup(
            jpnl_heapPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 729, Short.MAX_VALUE)
        );

        jtbdpn_sortingGraphics.addTab("Heap", jpnl_heapPane);

        jpnl_bubblePane.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jpnl_bubblePaneLayout = new javax.swing.GroupLayout(jpnl_bubblePane);
        jpnl_bubblePane.setLayout(jpnl_bubblePaneLayout);
        jpnl_bubblePaneLayout.setHorizontalGroup(
            jpnl_bubblePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 672, Short.MAX_VALUE)
        );
        jpnl_bubblePaneLayout.setVerticalGroup(
            jpnl_bubblePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 729, Short.MAX_VALUE)
        );

        jtbdpn_sortingGraphics.addTab("Bubble", jpnl_bubblePane);

        jpnl_insertionPane.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jpnl_insertionPaneLayout = new javax.swing.GroupLayout(jpnl_insertionPane);
        jpnl_insertionPane.setLayout(jpnl_insertionPaneLayout);
        jpnl_insertionPaneLayout.setHorizontalGroup(
            jpnl_insertionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 672, Short.MAX_VALUE)
        );
        jpnl_insertionPaneLayout.setVerticalGroup(
            jpnl_insertionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 729, Short.MAX_VALUE)
        );

        jtbdpn_sortingGraphics.addTab("Insertion", jpnl_insertionPane);

        jpnl_selectionPane.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jpnl_selectionPaneLayout = new javax.swing.GroupLayout(jpnl_selectionPane);
        jpnl_selectionPane.setLayout(jpnl_selectionPaneLayout);
        jpnl_selectionPaneLayout.setHorizontalGroup(
            jpnl_selectionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 672, Short.MAX_VALUE)
        );
        jpnl_selectionPaneLayout.setVerticalGroup(
            jpnl_selectionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 729, Short.MAX_VALUE)
        );

        jtbdpn_sortingGraphics.addTab("Selection", jpnl_selectionPane);

        jpnl_quickPane.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jpnl_quickPaneLayout = new javax.swing.GroupLayout(jpnl_quickPane);
        jpnl_quickPane.setLayout(jpnl_quickPaneLayout);
        jpnl_quickPaneLayout.setHorizontalGroup(
            jpnl_quickPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 672, Short.MAX_VALUE)
        );
        jpnl_quickPaneLayout.setVerticalGroup(
            jpnl_quickPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 729, Short.MAX_VALUE)
        );

        jtbdpn_sortingGraphics.addTab("Quick", jpnl_quickPane);

        jpnl_mergePane.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jpnl_mergePaneLayout = new javax.swing.GroupLayout(jpnl_mergePane);
        jpnl_mergePane.setLayout(jpnl_mergePaneLayout);
        jpnl_mergePaneLayout.setHorizontalGroup(
            jpnl_mergePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 672, Short.MAX_VALUE)
        );
        jpnl_mergePaneLayout.setVerticalGroup(
            jpnl_mergePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 729, Short.MAX_VALUE)
        );

        jtbdpn_sortingGraphics.addTab("Merge", jpnl_mergePane);

        jlbl_heapSort.setForeground(new java.awt.Color(204, 204, 204));
        jlbl_heapSort.setText("Heap Sort");

        jlbl_bubbleSort.setForeground(new java.awt.Color(204, 204, 204));
        jlbl_bubbleSort.setText("Bubble Sort");

        jlbl_insertionSort.setForeground(new java.awt.Color(204, 204, 204));
        jlbl_insertionSort.setText("Insertion Sort");

        jlbl_selectionSort.setForeground(new java.awt.Color(204, 204, 204));
        jlbl_selectionSort.setText("Selection Sort");

        jlbl_quickSort.setForeground(new java.awt.Color(204, 204, 204));
        jlbl_quickSort.setText("Quick Sort");

        jlbl_mergeSort.setForeground(new java.awt.Color(204, 204, 204));
        jlbl_mergeSort.setText("Merge Sort");

        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("Length Gap:");

        jtxtfld_lengthGap.setBackground(new java.awt.Color(51, 51, 51));
        jtxtfld_lengthGap.setForeground(new java.awt.Color(153, 153, 153));
        jtxtfld_lengthGap.setText("100");
        jtxtfld_lengthGap.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jtxtfld_caretUpdate(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("Amount:");

        jtxtfld_amount.setBackground(new java.awt.Color(51, 51, 51));
        jtxtfld_amount.setForeground(new java.awt.Color(153, 153, 153));
        jtxtfld_amount.setText("10");
        jtxtfld_amount.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jtxtfld_caretUpdate(evt);
            }
        });

        jlbl_arrayInformation.setForeground(new java.awt.Color(204, 204, 204));
        jlbl_arrayInformation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbl_arrayInformation.setText("<html>10 arrays with a length of 50 will be produced at 100 array length intervals.</html>");

        jbtn_resetGraph.setText("Reset Graph");
        jbtn_resetGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_resetGraphActionPerformed(evt);
            }
        });

        btngrp_graphStyle.add(jrdbtn_basic);
        jrdbtn_basic.setForeground(new java.awt.Color(204, 204, 204));
        jrdbtn_basic.setText("Basic");
        jrdbtn_basic.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jrdbtn_basicStateChanged(evt);
            }
        });

        btngrp_graphStyle.add(jrdbtn_advanced);
        jrdbtn_advanced.setForeground(new java.awt.Color(204, 204, 204));
        jrdbtn_advanced.setSelected(true);
        jrdbtn_advanced.setText("Advanced");
        jrdbtn_advanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jrdbtn_basicStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jpnl_backgroundLayout = new javax.swing.GroupLayout(jpnl_background);
        jpnl_background.setLayout(jpnl_backgroundLayout);
        jpnl_backgroundLayout.setHorizontalGroup(
            jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnl_backgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jlbl_bubbleSort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlbl_insertionSort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlbl_selectionSort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlbl_quickSort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlbl_mergeSort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jpnl_backgroundLayout.createSequentialGroup()
                        .addGroup(jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtxtfld_lengthGap, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                            .addComponent(jtxtfld_arrayLength)
                            .addComponent(jtxtfld_amount)))
                    .addComponent(jSeparator2)
                    .addComponent(jlbl_heapSort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator3)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jbtn_createRandArr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlbl_arrayInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jbtn_resetGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jpnl_backgroundLayout.createSequentialGroup()
                        .addComponent(jrdbtn_basic, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jrdbtn_advanced)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jtbdpn_sortingGraphics)
                .addContainerGap())
        );
        jpnl_backgroundLayout.setVerticalGroup(
            jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnl_backgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(jpnl_backgroundLayout.createSequentialGroup()
                        .addGroup(jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jtxtfld_arrayLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jtxtfld_lengthGap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jtxtfld_amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlbl_heapSort, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlbl_bubbleSort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlbl_insertionSort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlbl_selectionSort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlbl_quickSort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlbl_mergeSort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbtn_createRandArr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtn_resetGraph)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jrdbtn_basic)
                            .addComponent(jrdbtn_advanced))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlbl_arrayInformation))
                    .addComponent(jtbdpn_sortingGraphics))
                .addContainerGap())
        );

        getContentPane().add(jpnl_background);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtn_createRandArrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_createRandArrActionPerformed

        setIcons(true);

        try {
            arrayLength = Integer.parseInt(jtxtfld_arrayLength.getText());
            lengthGap = Integer.parseInt(jtxtfld_lengthGap.getText());
            amount = Integer.parseInt(jtxtfld_amount.getText());
        } catch (Exception e) {
            jtxtfld_arrayLength.setText("ERROR!");
            return;
        }

        for (int i = 0; i < amount; i++) {
            unsortedList.clear();
            sortedList.clear();

            unsortedArray = new int[arrayLength];
            randomize(unsortedArray);
            arrayToList(unsortedList, unsortedArray);
            jlst_unsortedList.setModel(unsortedList);

            // ######################## SORTING ALGORITHMS ########################
            sortedList.clear();
            arrayToList(sortedList, heapSort(unsortedArray.clone()));
            jlst_sortedList.setModel(sortedList);
            jlst_sortedList.removeAll();
            jpnl_heapPane.add(heapGraph);
            allDatas.get(0).add(new double[]{arrayLength, delta});
            allDatas.set(0, sortData(allDatas.get(0)));
            heapGraph.setData(allDatas.get(0));
            heapGraph.arrangePointLocations();
            heapGraph.setSize(heapGraph.getParent().getWidth(), heapGraph.getParent().getHeight());

            sortedList.clear();
            arrayToList(sortedList, bubbleSort(unsortedArray.clone()));
            jlst_sortedList.setModel(sortedList);
            jlst_sortedList.removeAll();
            jpnl_bubblePane.add(bubbleGraph);
            allDatas.get(1).add(new double[]{arrayLength, delta});
            allDatas.set(1, sortData(allDatas.get(1)));
            bubbleGraph.setData(allDatas.get(1));
            bubbleGraph.arrangePointLocations();
            bubbleGraph.setSize(bubbleGraph.getParent().getWidth(), bubbleGraph.getParent().getHeight());

            sortedList.clear();
            arrayToList(sortedList, insertionSort(unsortedArray.clone()));
            jlst_sortedList.setModel(sortedList);
            jlst_sortedList.removeAll();
            jpnl_insertionPane.add(insertionGraph);
            allDatas.get(2).add(new double[]{arrayLength, delta});
            allDatas.set(2, sortData(allDatas.get(2)));
            insertionGraph.setData(allDatas.get(2));
            insertionGraph.arrangePointLocations();
            insertionGraph.setSize(insertionGraph.getParent().getWidth(), insertionGraph.getParent().getHeight());

            sortedList.clear();
            arrayToList(sortedList, selectionSort(unsortedArray.clone()));
            jlst_sortedList.setModel(sortedList);
            jlst_sortedList.removeAll();
            jpnl_selectionPane.add(selectionGraph);
            allDatas.get(3).add(new double[]{arrayLength, delta});
            allDatas.set(3, sortData(allDatas.get(3)));
            selectionGraph.setData(allDatas.get(3));
            selectionGraph.arrangePointLocations();
            selectionGraph.setSize(selectionGraph.getParent().getWidth(), selectionGraph.getParent().getHeight());

            sortedList.clear();
            arrayToList(sortedList, quickSort(unsortedArray.clone()));
            jlst_sortedList.setModel(sortedList);
            jlst_sortedList.removeAll();
            jpnl_quickPane.add(quickGraph);
            allDatas.get(4).add(new double[]{arrayLength, delta});
            allDatas.set(4, sortData(allDatas.get(4)));
            quickGraph.setData(allDatas.get(4));
            quickGraph.arrangePointLocations();
            quickGraph.setSize(quickGraph.getParent().getWidth(), quickGraph.getParent().getHeight());

            sortedList.clear();
            arrayToList(sortedList, mergeSort(unsortedArray.clone()));
            jlst_sortedList.setModel(sortedList);
            jlst_sortedList.removeAll();
            jpnl_mergePane.add(mergeGraph);
            allDatas.get(5).add(new double[]{arrayLength, delta});
            allDatas.set(5, sortData(allDatas.get(5)));
            mergeGraph.setData(allDatas.get(5));
            mergeGraph.arrangePointLocations();
            mergeGraph.setSize(mergeGraph.getParent().getWidth(), mergeGraph.getParent().getHeight());
            // ####################################################################

            jtbdpn_sortingGraphics.repaint();
            arrayLength += lengthGap;
        }
    }//GEN-LAST:event_jbtn_createRandArrActionPerformed

    private void jtxtfld_caretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jtxtfld_caretUpdate

        try {
            arrayLength = Integer.parseInt(jtxtfld_arrayLength.getText());
            lengthGap = Integer.parseInt(jtxtfld_lengthGap.getText());
            amount = Integer.parseInt(jtxtfld_amount.getText());

            jlbl_arrayInformation.setForeground(new Color(204, 204, 204));
            jlbl_arrayInformation.setText("<html>" + amount + " arrays with a length of " + arrayLength + " will be produced at " + lengthGap + " array length intervals.</html>");
        } catch (Exception e) {
            jlbl_arrayInformation.setForeground(Color.RED);
            jlbl_arrayInformation.setText("ERROR!");
        }
    }//GEN-LAST:event_jtxtfld_caretUpdate

    private void jbtn_resetGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_resetGraphActionPerformed
        resetGraph();
        jtbdpn_sortingGraphics.repaint();
    }//GEN-LAST:event_jbtn_resetGraphActionPerformed

    private void jrdbtn_basicStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jrdbtn_basicStateChanged
        heapGraph.setIsBasic(!jrdbtn_advanced.isSelected());
        bubbleGraph.setIsBasic(!jrdbtn_advanced.isSelected());
        insertionGraph.setIsBasic(!jrdbtn_advanced.isSelected());
        selectionGraph.setIsBasic(!jrdbtn_advanced.isSelected());
        quickGraph.setIsBasic(!jrdbtn_advanced.isSelected());
        mergeGraph.setIsBasic(!jrdbtn_advanced.isSelected());
        
        heapGraph.repaint();
        bubbleGraph.repaint();
        insertionGraph.repaint();
        selectionGraph.repaint();
        quickGraph.repaint();
        mergeGraph.repaint();
    }//GEN-LAST:event_jrdbtn_basicStateChanged

    private void resetGraph() {
        for (ArrayList<double[]> data : allDatas) {
            data.clear();
        }

        heapGraph.setData(new ArrayList<>());
        bubbleGraph.setData(new ArrayList<>());
        insertionGraph.setData(new ArrayList<>());
        selectionGraph.setData(new ArrayList<>());
        quickGraph.setData(new ArrayList<>());
        mergeGraph.setData(new ArrayList<>());

        heapGraph.arrangePointLocations();
        bubbleGraph.arrangePointLocations();
        insertionGraph.arrangePointLocations();
        selectionGraph.arrangePointLocations();
        quickGraph.arrangePointLocations();
        mergeGraph.arrangePointLocations();
    }

    private void randomize(int array[]) {
        for (int i = 0; i < array.length; i++) {
            array[i] = (int) (Math.random() * 1000);
        }
    }

    private void arrayToList(DefaultListModel list, int array[]) {
        for (int i = 0; i < array.length; i++) {
            list.addElement(array[i]);
        }
    }

    private void setIcons(boolean isCross) {
        jlbl_heapSort.setIcon(isCross ? iconCross : iconTick);
        jlbl_bubbleSort.setIcon(isCross ? iconCross : iconTick);
        jlbl_insertionSort.setIcon(isCross ? iconCross : iconTick);
        jlbl_mergeSort.setIcon(isCross ? iconCross : iconTick);
        jlbl_quickSort.setIcon(isCross ? iconCross : iconTick);
        jlbl_selectionSort.setIcon(isCross ? iconCross : iconTick);

    }

    private ArrayList<double[]> sortData(ArrayList<double[]> dataToSort) {
        for (int i = 0; i < dataToSort.size() - 1; i++) {
            for (int j = 0; j < dataToSort.size() - i - 1; j++) {
                if (dataToSort.get(j)[0] < dataToSort.get(j + 1)[0]) {
                    double[] temp = dataToSort.get(j);
                    dataToSort.set(j, dataToSort.get(j + 1));
                    dataToSort.set(j + 1, temp);
                }
            }
        }
        return dataToSort;
    }

    private int[] heapSort(int array[]) {
        jlbl_heapSort.setIcon(iconCross);
        jlbl_heapSort.repaint();
        long startTime = System.nanoTime();
        int[] finalArray = HeapSort.heapSort(array, array.length);
        long finishTime = System.nanoTime();
        SortingAlgorithms.delta = (finishTime - startTime) / 1000000000.0;
        jlbl_heapSort.setText("Heap Sort \t" + delta);
        jlbl_heapSort.setIcon(iconTick);
        jlbl_heapSort.repaint();
        sortedArrays.add(finalArray);
        return finalArray;
    }

    private int[] bubbleSort(int array[]) {
        jlbl_bubbleSort.setIcon(iconCross);
        jlbl_bubbleSort.repaint();

        long startTime = System.nanoTime();
        int[] finalArray = BubbleSort.bubbleSort(array, array.length);
        long finishTime = System.nanoTime();
        delta = (finishTime - startTime) / 1000000000.0;

        jlbl_bubbleSort.setText("Bubble Sort \t" + delta);
        jlbl_bubbleSort.setIcon(iconTick);
        jlbl_bubbleSort.repaint();
        sortedArrays.add(finalArray);
        return finalArray;
    }

    private int[] insertionSort(int array[]) {
        jlbl_insertionSort.setIcon(iconCross);
        jlbl_insertionSort.repaint();

        long startTime = System.nanoTime();
        int[] finalArray = BubbleSort.bubbleSort(array, array.length);
        long finishTime = System.nanoTime();
        delta = (finishTime - startTime) / 1000000000.0;

        jlbl_insertionSort.setText("Insertion Sort \t" + delta);
        jlbl_insertionSort.setIcon(iconTick);
        jlbl_insertionSort.repaint();
        sortedArrays.add(finalArray);
        return finalArray;
    }

    private int[] selectionSort(int array[]) {
        jlbl_selectionSort.setIcon(iconCross);
        jlbl_selectionSort.repaint();

        long startTime = System.nanoTime();
        int[] finalArray = SelectionSort.selectionSort(array, array.length);
        long finishTime = System.nanoTime();
        delta = (finishTime - startTime) / 1000000000.0;

        jlbl_selectionSort.setText("Selection Sort \t" + delta);
        jlbl_selectionSort.setIcon(iconTick);
        jlbl_selectionSort.repaint();
        sortedArrays.add(finalArray);
        return finalArray;
    }

    private int[] quickSort(int array[]) {
        jlbl_quickSort.setIcon(iconCross);
        jlbl_quickSort.repaint();

        long startTime = System.nanoTime();
        int[] finalArray = QuickSort.quickSort(array, 0, array.length - 1);
        long finishTime = System.nanoTime();
        delta = (finishTime - startTime) / 1000000000.0;

        jlbl_quickSort.setText("Quick Sort \t" + delta);
        jlbl_quickSort.setIcon(iconTick);
        jlbl_quickSort.repaint();
        sortedArrays.add(finalArray);
        return finalArray;
    }

    private int[] mergeSort(int array[]) {
        jlbl_mergeSort.setIcon(iconCross);
        jlbl_mergeSort.repaint();

        long startTime = System.nanoTime();
        int[] finalArray = MergeSort.mergeSort(array, 0, array.length - 1);
        long finishTime = System.nanoTime();
        delta = (finishTime - startTime) / 1000000000.0;

        jlbl_mergeSort.setText("Merge Sort \t" + delta);
        jlbl_mergeSort.setIcon(iconTick);
        jlbl_mergeSort.repaint();
        sortedArrays.add(finalArray);
        return finalArray;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SortingAlgorithms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SortingAlgorithms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SortingAlgorithms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SortingAlgorithms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SortingAlgorithms().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btngrp_graphStyle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton jbtn_createRandArr;
    private javax.swing.JButton jbtn_resetGraph;
    private javax.swing.JLabel jlbl_arrayInformation;
    private javax.swing.JLabel jlbl_bubbleSort;
    private javax.swing.JLabel jlbl_heapSort;
    private javax.swing.JLabel jlbl_insertionSort;
    private javax.swing.JLabel jlbl_mergeSort;
    private javax.swing.JLabel jlbl_quickSort;
    private javax.swing.JLabel jlbl_selectionSort;
    private javax.swing.JList<String> jlst_sortedList;
    private javax.swing.JList<String> jlst_unsortedList;
    private javax.swing.JPanel jpnl_background;
    private javax.swing.JPanel jpnl_bubblePane;
    private javax.swing.JPanel jpnl_heapPane;
    private javax.swing.JPanel jpnl_insertionPane;
    private javax.swing.JPanel jpnl_mergePane;
    private javax.swing.JPanel jpnl_quickPane;
    private javax.swing.JPanel jpnl_selectionPane;
    private javax.swing.JRadioButton jrdbtn_advanced;
    private javax.swing.JRadioButton jrdbtn_basic;
    private javax.swing.JTabbedPane jtbdpn_sortingGraphics;
    private javax.swing.JTextField jtxtfld_amount;
    private javax.swing.JTextField jtxtfld_arrayLength;
    private javax.swing.JTextField jtxtfld_lengthGap;
    // End of variables declaration//GEN-END:variables
}
